/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.21
 * Generated at: 2015-07-16 16:53:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/javax.servlet-jstl-1.2.jar", Long.valueOf(1437057067497L));
    _jspx_dependants.put("jar:file:/D:/Workspace%20New/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/TaskManager/WEB-INF/lib/javax.servlet-jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153399482000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html ng-app=\"taskManager\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>AngularJS Task Manager</title>\r\n");
      out.write("<link href='./css/style.css' rel=\"stylesheet\" type=\"text/css\"></link>\r\n");
      out.write("<link href='./css/css/font-awesome.css' rel=\"stylesheet\" type=\"text/css\"></link>\r\n");
      out.write("<link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>\r\n");
      out.write("<script data-require=\"angular.js@*\" data-semver=\"1.2.13\" src=\"http://code.angularjs.org/1.2.13/angular.js\"></script>\r\n");
      out.write("  <script data-require=\"angular-animate@*\" data-semver=\"1.2.13\" src=\"http://code.angularjs.org/1.2.13/angular-animate.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/app.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div ng-controller=\"taskManagerController\">\r\n");
      out.write("<h2 class=\"page-title\">Task Manager using Spring MVC 4 Rest &amp; AngularJS</h2>\r\n");
      out.write("<h4 class=\"page-title\">Demo &amp; Tutorial by <a href=\"\">Priyadarshini</a></h4>\r\n");
      out.write("<a href=\"http://www.programming-free.com/2014/06/crud-springmvc-restful-webservices-angularjs.html\" class=\"button-red\" style=\"text-align:center;width:70px;margin-left:45%;margin-right:40%\">Tutorial</a>\t\r\n");
      out.write("\t<div id=\"task-panel\" class=\"fadein fadeout showpanel panel\"  ng-show=\"toggle\">\t\r\n");
      out.write("\t\t<div class=\"panel-heading\">\r\n");
      out.write("\t\t\t<i class=\"panel-title-icon fa fa-tasks\"></i>\r\n");
      out.write("\t\t\t<span class=\"panel-title\">Recent Tasks</span>\r\n");
      out.write("\t\t\t<div class=\"panel-heading-controls\">\r\n");
      out.write("\t\t\t\t<button ng-click=\"toggle = !toggle\" class=\"btn-panel\">Add New Task</button>\r\n");
      out.write("\t\t\t\t<button class=\"btn-panel\" confirmed-click=\"archiveTasks()\" ng-confirm-click=\"Would you like to archive completed tasks?\">Clear completed tasks</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"panel-body\">\r\n");
      out.write("\t\t\t<div class=\"task\" ng-repeat=\"task in tasks\">\r\n");
      out.write("\t\t\t\t<span ng-if=\"task.taskPriority=='HIGH'\" class=\"priority priority-red\">\r\n");
      out.write("\t\t\t\t\t{{task.taskPriority}}\r\n");
      out.write("\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t<span ng-if=\"task.taskPriority=='MEDIUM'\" class=\"priority priority-yellow\">\r\n");
      out.write("\t\t\t\t\t{{task.taskPriority}}\r\n");
      out.write("\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t<span ng-if=\"task.taskPriority=='LOW'\" class=\"priority priority-green\">\r\n");
      out.write("\t\t\t\t\t{{task.taskPriority}}\r\n");
      out.write("\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t<div class=\"action-checkbox\">\r\n");
      out.write("\t\t\t\t\t<input id=\"{{task.taskId}}\" type=\"checkbox\" value=\"{{task.taskId}}\" ng-checked=\"selection.indexOf(task.taskId) > -1\" ng-click=\"toggleSelection(task.taskId)\" />\r\n");
      out.write("\t  \t\t\t\t<label for=\"{{task.taskId}}\"></label>\t\t\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div ng-if=\"task.taskStatus=='COMPLETED'\">\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<a href=\"#\" class=\"checkedClass\">\r\n");
      out.write("\t\t\t\t\t\t{{task.taskName}}\r\n");
      out.write("\t\t\t\t\t<span class=\"action-status\">{{task.taskStatus}}</span>\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div ng-if=\"task.taskStatus=='ACTIVE'\">\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<a href=\"#\" class=\"uncheckedClass\">\r\n");
      out.write("\t\t\t\t\t\t{{task.taskName}}\r\n");
      out.write("\t\t\t\t\t\t<span class=\"action-status\">{{task.taskStatus}}</span>\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"add-task-panel\" class=\"fadein fadeout addpanel panel\" ng-hide=\"toggle\">\r\n");
      out.write("\t\t<div class=\"panel-heading\">\r\n");
      out.write("\t\t\t<i class=\"panel-title-icon fa fa-plus\"></i>\r\n");
      out.write("\t\t\t<span class=\"panel-title\">Add Task</span>\r\n");
      out.write("\t\t\t<div class=\"panel-heading-controls\">\r\n");
      out.write("\t\t\t\t<button ng-click=\"toggle = !toggle\" class=\"btn-panel\">Show All Tasks</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"panel-body\">\r\n");
      out.write("\t\t\t<div class=\"task\" >\r\n");
      out.write("\t\t\t\t<table class=\"add-task\">\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>Task Name:</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"text\" ng-model=\"taskName\"/></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>Task Description:</td>\r\n");
      out.write("\t\t\t\t\t\t<td><input type=\"text\" ng-model=\"taskDesc\"/></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>Task Status:</td>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t<select ng-model=\"taskStatus\" ng-options=\"status as status for status in statuses\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<option value=\"\">-- Select --</option>\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t     \t</select>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>Task Priority:</td>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t<select ng-model=\"taskPriority\" ng-options=\"priority as priority for priority in priorities\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<option value=\"\">-- Select --</option>\r\n");
      out.write("\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td><br/><button ng-click=\"addTask()\" class=\"btn-panel-big\">Add New Task</button></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</table>\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
